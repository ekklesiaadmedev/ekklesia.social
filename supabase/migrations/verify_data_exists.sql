-- ========================================
-- VERIFICA√á√ÉO SE OS DADOS EXISTEM REALMENTE
-- ========================================

-- 1. VERIFICAR QUANTOS USU√ÅRIOS EXISTEM (SEM RLS)
SET row_security = off;
SELECT 'TOTAL_USERS_NO_RLS' as check_type, count(*) as count FROM profiles;
SELECT 'USERS_DATA_NO_RLS' as check_type, id, email, full_name, role FROM profiles ORDER BY email LIMIT 10;
SET row_security = on;

-- 2. VERIFICAR COM RLS HABILITADO
SELECT 'TOTAL_USERS_WITH_RLS' as check_type, count(*) as count FROM profiles;

-- 3. VERIFICAR SE O USU√ÅRIO ADMIN EXISTE E TEM PERMISS√ïES
DO $$
DECLARE
    admin_user_id UUID;
    admin_profile RECORD;
    test_result TEXT := '';
BEGIN
    -- Buscar usu√°rio admin na auth.users
    SELECT id INTO admin_user_id
    FROM auth.users
    WHERE email = 'social@ekklesia.com'
    LIMIT 1;
    
    IF admin_user_id IS NOT NULL THEN
        test_result := test_result || '‚úÖ Usu√°rio admin encontrado na auth.users: ' || admin_user_id || E'\n';
        
        -- Verificar se existe perfil
        SELECT * INTO admin_profile
        FROM profiles
        WHERE id = admin_user_id;
        
        IF FOUND THEN
            test_result := test_result || '‚úÖ Perfil admin encontrado - Role: ' || admin_profile.role || E'\n';
            test_result := test_result || '   Email: ' || admin_profile.email || E'\n';
            test_result := test_result || '   Nome: ' || COALESCE(admin_profile.full_name, 'NULL') || E'\n';
        ELSE
            test_result := test_result || '‚ùå PERFIL ADMIN N√ÉO ENCONTRADO!' || E'\n';
            
            -- Tentar criar o perfil
            BEGIN
                INSERT INTO profiles (id, email, full_name, role)
                VALUES (admin_user_id, 'social@ekklesia.com', 'Administrador', 'admin');
                test_result := test_result || '‚úÖ Perfil admin criado com sucesso!' || E'\n';
            EXCEPTION WHEN OTHERS THEN
                test_result := test_result || '‚ùå Erro ao criar perfil: ' || SQLERRM || E'\n';
            END;
        END IF;
    ELSE
        test_result := test_result || '‚ùå USU√ÅRIO ADMIN N√ÉO ENCONTRADO NA AUTH.USERS!' || E'\n';
    END IF;
    
    RAISE NOTICE E'\nüîç VERIFICA√á√ÉO DO ADMIN:\n%', test_result;
END $$;

-- 4. TESTAR POL√çTICAS RLS SIMULANDO USU√ÅRIO ADMIN
DO $$
DECLARE
    admin_user_id UUID;
    profiles_count INTEGER;
    test_result TEXT := '';
BEGIN
    -- Buscar usu√°rio admin
    SELECT id INTO admin_user_id
    FROM auth.users
    WHERE email = 'social@ekklesia.com'
    LIMIT 1;
    
    IF admin_user_id IS NOT NULL THEN
        -- Simular contexto de usu√°rio autenticado
        PERFORM set_config('request.jwt.claims', json_build_object('sub', admin_user_id)::text, true);
        
        -- Testar acesso aos profiles
        BEGIN
            SELECT COUNT(*) INTO profiles_count FROM profiles;
            test_result := test_result || '‚úÖ Como admin, pode ver ' || profiles_count || ' profiles' || E'\n';
        EXCEPTION WHEN OTHERS THEN
            test_result := test_result || '‚ùå Erro ao acessar profiles como admin: ' || SQLERRM || E'\n';
        END;
    ELSE
        test_result := test_result || '‚ùå N√£o foi poss√≠vel testar - admin n√£o existe' || E'\n';
    END IF;
    
    RAISE NOTICE E'\nüîç TESTE DE POL√çTICAS RLS:\n%', test_result;
END $$;

-- 5. VERIFICAR POL√çTICAS ATIVAS
SELECT 
    'POL√çTICAS_ATIVAS' as info,
    policyname,
    cmd,
    permissive,
    roles,
    qual,
    with_check
FROM pg_policies 
WHERE tablename = 'profiles'
ORDER BY policyname;

-- 6. VERIFICAR STATUS RLS
SELECT 
    'RLS_STATUS' as info,
    schemaname,
    tablename,
    rowsecurity as rls_enabled
FROM pg_tables 
WHERE tablename = 'profiles';

-- 7. MOSTRAR TODOS OS USU√ÅRIOS (PARA DEBUG)
SELECT 
    'TODOS_OS_USUARIOS' as info,
    id,
    email,
    full_name,
    role,
    created_at,
    updated_at
FROM profiles
ORDER BY created_at;

SELECT 'üîç VERIFICA√á√ÉO COMPLETA! Analise os resultados acima.' as status_final;