// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL as string;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY as string;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error('Supabase environment variables are missing. Please set VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY.');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  // Garantir que todas as requisi√ß√µes incluam o header 'apikey'
  global: {
    fetch: (url, options = {}) => {
      console.log(`üåê [SUPABASE_CLIENT] Fetch: ${url}`, {
        method: options.method || 'GET',
        headers: options.headers,
        body: options.body ? 'presente' : 'ausente'
      });
      
      // Garante headers b√°sicos e Authorization para chamadas de fun√ß√µes quando ausente
      const mergedHeaders: Record<string, string> = {
        ...(options.headers as Record<string, string> | undefined),
        'User-Agent': 'Ekklesia.social/1.0',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        apikey: SUPABASE_PUBLISHABLE_KEY,
      };

      // Para endpoints de Edge Functions, garanta Authorization com a chave p√∫blica se n√£o houver
      if (typeof url === 'string' && url.includes('/functions/v1/')) {
        if (!('Authorization' in mergedHeaders)) {
          mergedHeaders['Authorization'] = `Bearer ${SUPABASE_PUBLISHABLE_KEY}`;
        }
      }

      console.log(`üåê [SUPABASE_CLIENT] Headers finais:`, mergedHeaders);

      return fetch(url, {
        ...options,
        headers: mergedHeaders,
      }).then(response => {
        console.log(`üåê [SUPABASE_CLIENT] Resposta:`, {
          url,
          status: response.status,
          statusText: response.statusText,
          headers: Object.fromEntries(response.headers.entries())
        });
        return response;
      }).catch(error => {
        console.error(`üåê [SUPABASE_CLIENT] Erro na requisi√ß√£o:`, {
          url,
          error
        });
        throw error;
      });
    },
    headers: {
      apikey: SUPABASE_PUBLISHABLE_KEY,
    },
  },
});